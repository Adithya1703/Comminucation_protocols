
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000234  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003cc  080003cc  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003cc  080003cc  00002020  2**0
                  CONTENTS
  4 .ARM          00000000  080003cc  080003cc  00002020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003cc  080003cc  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003cc  080003cc  000013cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003d0  080003d0  000013d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080003d4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  080003f4  00002020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080003f4  0000203c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000260  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000166  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00002418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004c  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001013  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000932  00000000  00000000  000034ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d10  00000000  00000000  00003e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00007b31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d4  00000000  00000000  00007b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00007c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003b4 	.word	0x080003b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	080003b4 	.word	0x080003b4

080001d8 <main>:
#include "uart.h"

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	//Enable clock on both buses of GPIOA and USART2
    //Calibrate Moder and Alternate functions of GPIOA
    //Configure USART2 data registers, BRR(baud rate) and SR(status register)and CR1(control register to enable)
	uart2_tx_init();
 80001dc:	f000 f818 	bl	8000210 <uart2_tx_init>

	while(1){
		uart2_write('A');
 80001e0:	2041      	movs	r0, #65	@ 0x41
 80001e2:	f000 f87d 	bl	80002e0 <uart2_write>
 80001e6:	e7fb      	b.n	80001e0 <main+0x8>

080001e8 <compute_USART_BRR>:
uint32_t *USART2_BRR = (uint32_t*)0x40004408;
uint32_t *USART2_CR1 = (uint32_t*)0x4000440C;


uint16_t compute_USART_BRR(uint32_t PeripheralCLK, uint32_t Baudrate)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]
	return ((PeripheralCLK+(Baudrate/2U))/Baudrate);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	085a      	lsrs	r2, r3, #1
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	441a      	add	r2, r3
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000200:	b29b      	uxth	r3, r3
}
 8000202:	4618      	mov	r0, r3
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
	...

08000210 <uart2_tx_init>:


void uart2_tx_init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	//Enabling Clock access to GPIOA
	*portAHB1ENR|=GPIOAEN; //enables GPIOAEN in RCC
 8000214:	4b2b      	ldr	r3, [pc, #172]	@ (80002c4 <uart2_tx_init+0xb4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	4b2a      	ldr	r3, [pc, #168]	@ (80002c4 <uart2_tx_init+0xb4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f042 0201 	orr.w	r2, r2, #1
 8000222:	601a      	str	r2, [r3, #0]

	//SET GPIOA - PA2 Mode to Alternate Function mode
	*GPIOA_MODER&=~(1U<<4); //sets 0 at MODER pos 4 for PA2
 8000224:	4b28      	ldr	r3, [pc, #160]	@ (80002c8 <uart2_tx_init+0xb8>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b27      	ldr	r3, [pc, #156]	@ (80002c8 <uart2_tx_init+0xb8>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f022 0210 	bic.w	r2, r2, #16
 8000232:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER|=(1U<<5); //sets 1 at MODER pos 5 for PA
 8000234:	4b24      	ldr	r3, [pc, #144]	@ (80002c8 <uart2_tx_init+0xb8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	4b23      	ldr	r3, [pc, #140]	@ (80002c8 <uart2_tx_init+0xb8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f042 0220 	orr.w	r2, r2, #32
 8000242:	601a      	str	r2, [r3, #0]

	//SET GPIOA - PA2 Alternate function type to be USART_TX(AF07)
	*GPIOA_AFRL|=(1U<<8); //sets PA2 alternate function type to UART_TX(AF07(0111 at PA2) - function type as per data sheet)
 8000244:	4b21      	ldr	r3, [pc, #132]	@ (80002cc <uart2_tx_init+0xbc>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	4b20      	ldr	r3, [pc, #128]	@ (80002cc <uart2_tx_init+0xbc>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000252:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL|=(1U<<9); //sets PA2 alternate function type to UART_TX(AF07(0111 at PA2) - function type as per data sheet)
 8000254:	4b1d      	ldr	r3, [pc, #116]	@ (80002cc <uart2_tx_init+0xbc>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b1c      	ldr	r3, [pc, #112]	@ (80002cc <uart2_tx_init+0xbc>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000262:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL|=(1U<<10); //sets PA2 alternate function type to UART_TX(AF07(0111 at PA2) - function type as per data sheet)
 8000264:	4b19      	ldr	r3, [pc, #100]	@ (80002cc <uart2_tx_init+0xbc>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4b18      	ldr	r3, [pc, #96]	@ (80002cc <uart2_tx_init+0xbc>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000272:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL&=~(1U<<11); //sets PA2 alternate function type to UART_TX(AF07(0111 at PA2) - function type as per data sheet)
 8000274:	4b15      	ldr	r3, [pc, #84]	@ (80002cc <uart2_tx_init+0xbc>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	4b14      	ldr	r3, [pc, #80]	@ (80002cc <uart2_tx_init+0xbc>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000282:	601a      	str	r2, [r3, #0]

	//Configure USART CLOCK Access
	*portAPB1ENR|=UART2EN; //17 is the bit pos of USART2 in APB1ENR RCC to enable USART2 clk access
 8000284:	4b12      	ldr	r3, [pc, #72]	@ (80002d0 <uart2_tx_init+0xc0>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <uart2_tx_init+0xc0>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000292:	601a      	str	r2, [r3, #0]

	//Configure Baudrate
	*USART2_BRR=compute_USART_BRR(APB1_CLK, UART_BAUDRATE); //formula to compute BRR of USART2
 8000294:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000298:	480e      	ldr	r0, [pc, #56]	@ (80002d4 <uart2_tx_init+0xc4>)
 800029a:	f7ff ffa5 	bl	80001e8 <compute_USART_BRR>
 800029e:	4603      	mov	r3, r0
 80002a0:	461a      	mov	r2, r3
 80002a2:	4b0d      	ldr	r3, [pc, #52]	@ (80002d8 <uart2_tx_init+0xc8>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	601a      	str	r2, [r3, #0]

	//Configure transfer direction in CR1(control register1)(TE(transmit for PA2) - Bit 3)
	*USART2_CR1=0x0008;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <uart2_tx_init+0xcc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2208      	movs	r2, #8
 80002ae:	601a      	str	r2, [r3, #0]

	//Also enable USART enable bit 13 in CR1
	*USART2_CR1|=0x2000;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <uart2_tx_init+0xcc>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <uart2_tx_init+0xcc>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80002be:	601a      	str	r2, [r3, #0]
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000000 	.word	0x20000000
 80002c8:	20000008 	.word	0x20000008
 80002cc:	2000000c 	.word	0x2000000c
 80002d0:	20000004 	.word	0x20000004
 80002d4:	00f42400 	.word	0x00f42400
 80002d8:	20000018 	.word	0x20000018
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <uart2_write>:

void uart2_write(int ch){
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	//check whether USART2_SR is empty, if its not empty then we can wirte to data register this is done by checking whether ORE(overrun) is 1 or not
	while(!(*USART2_SR&0x0008)){
 80002e8:	e004      	b.n	80002f4 <uart2_write+0x14>
		*USART2_DR = (ch&0xFF);
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <uart2_write+0x30>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	601a      	str	r2, [r3, #0]
	while(!(*USART2_SR&0x0008)){
 80002f4:	4b07      	ldr	r3, [pc, #28]	@ (8000314 <uart2_write+0x34>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f003 0308 	and.w	r3, r3, #8
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0f3      	beq.n	80002ea <uart2_write+0xa>

	// another way to check whether to send data to DR
	/* while(!(*USART_SR&0x0080)){}
	 * this will ensure that data gets sent when DR is empty
	 */
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	20000014 	.word	0x20000014
 8000314:	20000010 	.word	0x20000010

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	@ (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	@ (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	@ (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	@ (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	@ (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	@ (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 f811 	bl	800036c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ff45 	bl	80001d8 <main>

0800034e <LoopForever>:

LoopForever:
  b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800035c:	080003d4 	.word	0x080003d4
  ldr r2, =_sbss
 8000360:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000364:	2000003c 	.word	0x2000003c

08000368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>
	...

0800036c <__libc_init_array>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	4d0d      	ldr	r5, [pc, #52]	@ (80003a4 <__libc_init_array+0x38>)
 8000370:	4c0d      	ldr	r4, [pc, #52]	@ (80003a8 <__libc_init_array+0x3c>)
 8000372:	1b64      	subs	r4, r4, r5
 8000374:	10a4      	asrs	r4, r4, #2
 8000376:	2600      	movs	r6, #0
 8000378:	42a6      	cmp	r6, r4
 800037a:	d109      	bne.n	8000390 <__libc_init_array+0x24>
 800037c:	4d0b      	ldr	r5, [pc, #44]	@ (80003ac <__libc_init_array+0x40>)
 800037e:	4c0c      	ldr	r4, [pc, #48]	@ (80003b0 <__libc_init_array+0x44>)
 8000380:	f000 f818 	bl	80003b4 <_init>
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	10a4      	asrs	r4, r4, #2
 8000388:	2600      	movs	r6, #0
 800038a:	42a6      	cmp	r6, r4
 800038c:	d105      	bne.n	800039a <__libc_init_array+0x2e>
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	f855 3b04 	ldr.w	r3, [r5], #4
 8000394:	4798      	blx	r3
 8000396:	3601      	adds	r6, #1
 8000398:	e7ee      	b.n	8000378 <__libc_init_array+0xc>
 800039a:	f855 3b04 	ldr.w	r3, [r5], #4
 800039e:	4798      	blx	r3
 80003a0:	3601      	adds	r6, #1
 80003a2:	e7f2      	b.n	800038a <__libc_init_array+0x1e>
 80003a4:	080003cc 	.word	0x080003cc
 80003a8:	080003cc 	.word	0x080003cc
 80003ac:	080003cc 	.word	0x080003cc
 80003b0:	080003d0 	.word	0x080003d0

080003b4 <_init>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr

080003c0 <_fini>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr
